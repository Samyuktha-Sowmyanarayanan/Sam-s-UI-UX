import 'package:flutter/material.dart';

void main() => runApp(const OasisApp());

class OasisApp extends StatelessWidget {
  const OasisApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'OASIS',
      theme: ThemeData(
        useMaterial3: true,
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.teal),
        textTheme: const TextTheme(
          displayLarge: TextStyle(fontWeight: FontWeight.w800, letterSpacing: 1.0),
        ),
      ),
      home: const SplashPage(),
    );
  }
}

/// ------------------------------------------------------------
/// 1) SPLASH / LANDING PAGE
/// ------------------------------------------------------------
class SplashPage extends StatelessWidget {
  const SplashPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Sky gradient
          Positioned.fill(
            child: Container(
              decoration: const BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [Color(0xFF9DD9FF), Color(0xFFEAF6FF)],
                ),
              ),
            ),
          ),

          // Mountains + meadow + clouds
          Positioned.fill(
            child: CustomPaint(painter: _MountainScenePainter()),
          ),

          // Title
          SafeArea(
            child: Align(
              alignment: Alignment.topCenter,
              child: Padding(
                padding: const EdgeInsets.only(top: 28.0),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: const [
                    Text(
                      'RETREATS & ADVENTURES',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                        letterSpacing: 2.0,
                      ),
                    ),
                    SizedBox(height: 10),
                    Text(
                      'OASIS',
                      style: TextStyle(
                        fontSize: 44,
                        fontWeight: FontWeight.w900,
                        color: Colors.white,
                        letterSpacing: 3,
                        shadows: [Shadow(color: Colors.black26, blurRadius: 8, offset: Offset(0, 3))],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),

          // Little car
          Positioned(
            left: 24,
            bottom: 120,
            child: Transform.rotate(
              angle: -0.05,
              child: Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: const Color(0xFFFFE082),
                  borderRadius: BorderRadius.circular(14),
                  boxShadow: const [BoxShadow(color: Colors.black26, blurRadius: 8, offset: Offset(0, 6))],
                ),
                child: const Icon(Icons.directions_car_rounded, size: 42, color: Color(0xFF5D5A00)),
              ),
            ),
          ),

          // CTA button
          Align(
            alignment: Alignment.bottomCenter,
            child: SafeArea(
              minimum: const EdgeInsets.all(20),
              child: SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
                    backgroundColor: const Color(0xFF1B5E20),
                    foregroundColor: Colors.white,
                    elevation: 8,
                  ),
                  onPressed: () => Navigator.of(context).push(
                    PageRouteBuilder(
                      transitionDuration: const Duration(milliseconds: 500),
                      pageBuilder: (_, a, __) => FadeTransition(opacity: a, child: const LoginPage()),
                    ),
                  ),
                  child: const Text(
                    'BEGIN YOUR JOURNEY NOW!',
                    style: TextStyle(fontWeight: FontWeight.w800, letterSpacing: 1.2),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class _MountainScenePainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()..isAntiAlias = true;

    // Distant clouds
    paint.color = const Color(0xFFFFFFFF).withOpacity(0.85);
    _cloud(canvas, Offset(size.width * 0.25, size.height * 0.18), 45);
    _cloud(canvas, Offset(size.width * 0.70, size.height * 0.22), 55);

    // Mountains
    final mountainBaseY = size.height * 0.62;

    Path big = Path()
      ..moveTo(size.width * 0.15, mountainBaseY)
      ..lineTo(size.width * 0.45, size.height * 0.25)
      ..lineTo(size.width * 0.75, mountainBaseY)
      ..close();
    paint.color = const Color(0xFF5B75A6);
    canvas.drawPath(big, paint);

    // Snow cap for big mountain
    Path snow = Path()
      ..moveTo(size.width * 0.45, size.height * 0.25)
      ..lineTo(size.width * 0.41, size.height * 0.33)
      ..lineTo(size.width * 0.49, size.height * 0.33)
      ..close();
    paint.color = Colors.white;
    canvas.drawPath(snow, paint);

    // Second mountain (front)
    Path front = Path()
      ..moveTo(size.width * 0.00, mountainBaseY)
      ..lineTo(size.width * 0.28, size.height * 0.35)
      ..lineTo(size.width * 0.56, mountainBaseY)
      ..close();
    paint.color = const Color(0xFF3E5582);
    canvas.drawPath(front, paint);

    // Meadow/ground
    paint.color = const Color(0xFF7CC37A);
    Path meadow = Path()
      ..moveTo(0, mountainBaseY)
      ..quadraticBezierTo(size.width * 0.35, mountainBaseY - 30, size.width, mountainBaseY - 10)
      ..lineTo(size.width, size.height)
      ..lineTo(0, size.height)
      ..close();
    canvas.drawPath(meadow, paint);

    // A few soft clouds near horizon
    paint.color = Colors.white.withOpacity(0.9);
    _cloud(canvas, Offset(size.width * 0.30, mountainBaseY - 80), 30);
    _cloud(canvas, Offset(size.width * 0.60, mountainBaseY - 70), 28);
  }

  void _cloud(Canvas canvas, Offset c, double r) {
    final p = Paint()..color = Colors.white;
    canvas.drawCircle(Offset(c.dx - r * 0.4, c.dy), r * 0.7, p);
    canvas.drawCircle(c, r, p);
    canvas.drawCircle(Offset(c.dx + r * 0.5, c.dy + r * 0.2), r * 0.65, p);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}

/// ------------------------------------------------------------
/// 2) LOGIN PAGE
/// ------------------------------------------------------------
class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passController = TextEditingController();
  bool _obscure = true;

  @override
  void dispose() {
    _emailController.dispose();
    _passController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final cs = Theme.of(context).colorScheme;

    return Scaffold(
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 18),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Header with torn-paper bottom
              ClipPath(
                clipper: _TornBottomClipper(),
                child: Container(
                  height: 200,
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: [cs.primaryContainer, cs.tertiaryContainer],
                    ),
                    image: const DecorationImage(
                      image: AssetImage(''), // optional: replace with your photo asset
                      fit: BoxFit.cover,
                      opacity: 0.0, // keep 0 unless you add an image
                    ),
                  ),
                  child: Stack(
                    children: [
                      Align(
                        alignment: Alignment.topLeft,
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Container(
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(8),
                              boxShadow: const [BoxShadow(color: Colors.black12, blurRadius: 6)],
                            ),
                            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            child: const Text(
                              'Retreat',
                              style: TextStyle(fontWeight: FontWeight.w800, fontSize: 18),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 24),

              Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    const Text('EMAIL ID:', style: TextStyle(fontWeight: FontWeight.w700)),
                    const SizedBox(height: 8),
                    TextFormField(
                      controller: _emailController,
                      keyboardType: TextInputType.emailAddress,
                      decoration: InputDecoration(
                        prefixIcon: const Icon(Icons.email_outlined),
                        hintText: 'you@example.com',
                        filled: true,
                        fillColor: Colors.grey.shade100,
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(14),
                          borderSide: BorderSide.none,
                        ),
                      ),
                      validator: (v) {
                        if (v == null || v.isEmpty) return 'Please enter your email';
                        final ok = RegExp(r'^.+@.+\..+\$').hasMatch(v);
                        if (!ok) return 'Enter a valid email';
                        return null;
                      },
                    ),

                    const SizedBox(height: 18),
                    const Text('SET A PASSWORD:', style: TextStyle(fontWeight: FontWeight.w700)),
                    const SizedBox(height: 8),
                    TextFormField(
                      controller: _passController,
                      obscureText: _obscure,
                      decoration: InputDecoration(
                        prefixIcon: const Icon(Icons.lock_outline),
                        suffixIcon: IconButton(
                          onPressed: () => setState(() => _obscure = !_obscure),
                          icon: Icon(_obscure ? Icons.visibility : Icons.visibility_off),
                        ),
                        hintText: 'Create a secure password',
                        filled: true,
                        fillColor: Colors.grey.shade100,
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(14),
                          borderSide: BorderSide.none,
                        ),
                      ),
                      validator: (v) {
                        if (v == null || v.isEmpty) return 'Please set a password';
                        if (v.length < 6) return 'Use at least 6 characters';
                        return null;
                      },
                    ),

                    const SizedBox(height: 22),
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
                        elevation: 3,
                      ),
                      onPressed: () {
                        if (_formKey.currentState!.validate()) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('Signed in! (demo)')),
                          );
                        }
                      },
                      child: const Text('SIGN IN', style: TextStyle(fontWeight: FontWeight.w800)),
                    ),
                    const SizedBox(height: 10),
                    TextButton(
                      onPressed: () {},
                      child: const Text('Forgot password?'),
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 26),

              // Bottom mini-illustrations style (simple icon avatars for demo)
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: const [
                  _MiniBubble(icon: Icons.spa_outlined, label: 'Wellness'),
                  _MiniBubble(icon: Icons.emoji_nature_outlined, label: 'Nature'),
                  _MiniBubble(icon: Icons.group_outlined, label: 'Community'),
                  _MiniBubble(icon: Icons.laptop_mac_outlined, label: 'Remote'),
                ],
              ),
              const SizedBox(height: 30),
            ],
          ),
        ),
      ),
    );
  }
}

class _MiniBubble extends StatelessWidget {
  const _MiniBubble({required this.icon, required this.label});
  final IconData icon;
  final String label;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
            boxShadow: const [BoxShadow(color: Colors.black12, blurRadius: 6, offset: Offset(0, 3))],
          ),
          child: Icon(icon, size: 26),
        ),
        const SizedBox(height: 6),
        Text(label, style: const TextStyle(fontSize: 12, fontWeight: FontWeight.w600)),
      ],
    );
  }
}

class _TornBottomClipper extends CustomClipper<Path> {
  @override
  Path getClip(Size size) {
    final p = Path()..lineTo(0, size.height - 30);

    // Create a jagged / torn paper effect
    final jagCount = 10;
    final step = size.width / jagCount;
    for (int i = 0; i < jagCount; i++) {
      final x = step * i;
      final isUp = i.isEven;
      p.lineTo(x + step * 0.5, size.height - (isUp ? 8 : 24));
      p.lineTo(x + step, size.height - 30);
    }

    p.lineTo(size.width, 0);
    p.close();
    return p;
  }

  @override
  bool shouldReclip(covariant CustomClipper<Path> oldClipper) => false;
}
